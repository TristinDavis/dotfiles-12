#!/usr/bin/env sh
# Silly functions to make a terminal look busy like in a movie

hex () {
    # https://www.commandlinefu.com/commands/view/6732/pretend-to-be-busy-in-office-to-enjoy-a-cup-of-coffee
    while true; do
        head -n 100 /dev/urandom
        sleep .1
    done | hexdump -C | grep 'ca fe'
}

progress () {
    local cur=0
    local tot=23
    local rem="$tot"
    local pct=0
    local skip=0

    printf '\e[?25l'

    printf '[-%*s] ' "$tot"
    printf '%3s%%' "$pct"
    while
        printf '\e[%sG=' $(( cur + 2 ))
        printf '\e[%sG%3s%% ' $(( tot + 5 )) "$pct"
        printf '\e[%sG%s\e[0K' $(( tot + 10 )) \
            "$(shuf -n $(echol 1 2 3 | shuf -n1) \
                /usr/share/dict/words | paste - - - -d' ')"

        [ "$cur" -eq "$tot" ] && break

        skip=$(( skip + 1 )) # make the text go faster than the progress
        if [ "$skip" -eq 3 ]; then
            skip=0
            cur=$(( cur + 1 ))
            rem=$(( rem - 1 ))
            pct=$(( 100 * cur / tot + (1000 * cur / tot % 10 >= 5 ? 1 : 0) ))
        fi
        sleep 0.05
    do :; done

    printf '\e[?25h\n'
}

spinner () {
    local anim="$1"
    local pad=1
    while true; do
        case "$anim" in
            balloon)
                set -- '.' 'o' 'O' '@' '*'
                ;;
            ball)
                set -- '_' 'o' 'O' 'o'
                ;;
            bounce)
                set -- \
                    '(*----)' \
                    '(-*---)' \
                    '(--*--)' \
                    '(---*-)' \
                    '(----*)' \
                    '(---*-)' \
                    '(--*--)' \
                    '(-*---)'
                pad=7
                ;;
            blink)
                set -- \
                    $(yes '(o)(o) ' | head -n 30 | tr -d '\n') \
                    '(-)(-)' \
                    '(_)(_)' \
                    '(-)(-)'
                pad=6
                ;;
            hypnotoad)
                set -- \
                    '(O)(o)' \
                    '(o)(O)'
                pad=6
                ;;
            fish)
                set -- \
                    '><{{{*>' \
                    '|<{{{*>'
                pad=7
                ;;
            ansi)
                set -- '┤' '┘' '┴' '└' '├' '┌' '┬' '┐'
                ;;
            vee)
                set -- '<' '^' '>' 'v'
                ;;
            dots)
                set -- '.' '..' '...' '....'
                pad=4
                ;;
            cells)
                set -- 'o' '0' '8' 'oo' '00' '88'
                pad=2
                ;;
            plus)
                set -- 'x' '+'
                ;;
            db)
                set -- 'd' '|' 'b' '|'
                ;;
            qp)
                set -- 'q' '|' 'p' '|'
                ;;
            alpha)
                set -- a b c d e f g h i j k l m n o p q r s t u v w x y z
                ;;
            tminus)
                set -- 9 8 7 6 5 4 3 2 1 0
                ;;
            spin|*)
                set -- '/' '-' '\' '|'
                ;;
        esac

        while [ $# -gt 0 ]; do
            printf '\e[%sD%-'"$pad"'s' "$pad" "$1"
            shift
            sleep 0.1
        done
    done
}

green_matrix () {
    # https://www.commandlinefu.com/commands/view/4352/another-matrix-style-implementation
    printf '\e[?25l'
    COL=$(( $(tput cols) / 2 ))
    clear
    tput setaf 2
    while :; do
        tput cup $((RANDOM%COL)) $((RANDOM%COL))
        printf "%$((RANDOM%COL))s" $((RANDOM%2))
        sleep 0.005
    done
    printf '\e[?25h'
}

hexdump () {
    # https://www.commandlinefu.com/commands/view/11904/generate-30-x-30-matrix
    hexdump -v -e '"%u"' </dev/urandom|fold -60|head -n 30|sed 's/\(.\{2\}\)/\1 /g'
}

_shuf () {
    # Reservoir sampling to choose random items in one pass.
    awk -v K="${1:?'Missing count'}" -v seed="$(date +%N)" '
    BEGIN { srand(seed) }
    {
        n = NR - 1
        if (n < K) { results[n] = $0 }
        else {
            s = int(rand() * n)
            if (s < K) { results[s] = $0 }
        }
    }
    END { for (i in results) print results[i] }
    '
}

_rand () {
    awk -v end="${1:?'Missing end'}" -v start="${2:-1}" -v seed="$(date +%N)" '
    BEGIN { srand(seed); print int(start + rand() * (end - start + 1)) }
    '
}

_main () {
    cmd="${1:?'Missing command.'}"
    shift 1
    "$cmd" "$@"
}

_main "$@"
